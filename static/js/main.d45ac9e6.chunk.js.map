{"version":3,"sources":["constants/index.ts","App/utils.ts","App/CountriesItem/index.tsx","query/index.ts","App/SoursDataButton/index.tsx","App/GenerateDataButton/index.tsx","App/RecursiveDataInfo/index.tsx","App/DynamicDataInfo/index.tsx","App/index.tsx","index.tsx"],"names":["RECURSIVE_DATA_GENERATION","DYNAMIC_DATA_GENERATION","STATIC_DATA","EXTERNAL_DATA","generateData","n","m","generateDataItem","i","name","children","addNewChildren","ni","itemData","CountryContext","createContext","visibleContext","setVisibleContext","CountriesItem","data","soursData","useState","visibleState","setVisibleState","useContext","dataNew","useEffect","lastChildren","length","className","onClick","map","item","GET_EXTERNAL_DATA","gql","SoursDataButton","setSoursData","type","id","autoComplete","checked","onChange","htmlFor","GenerateDataButton","setN","setM","placeholder","value","e","currentTarget","RecursiveDataInfo","role","xmlns","width","height","fill","viewBox","d","src","alt","DynamicDataInfo","App","useQuery","loading","error","externalData","countries","newSoursData","Provider","cache","InMemoryCache","client","ApolloClient","uri","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.d45ac9e6.chunk.js","sourcesContent":["export const RECURSIVE_DATA_GENERATION = 'recursiveDataGeneration'\nexport const DYNAMIC_DATA_GENERATION = 'dynamicDataGeneration'\nexport const STATIC_DATA = 'staticData'\nexport const EXTERNAL_DATA = 'externalData'\n","import { IRecursiveData } from '../interfaces'\n\nexport const generateData = (n: number, m: number): IRecursiveData[] => {\n  const generateDataItem = []\n  for (let i = 0; i < m; i += 1) {\n    if (n === 0) return generateDataItem\n    generateDataItem[i] = {\n      name: `item: ${i + 1} - ${n}`,\n      children: generateData(n - 1, m),\n    }\n  }\n  return generateDataItem\n}\n\nexport const addNewChildren = (\n  ni: number,\n  m: number,\n  itemData: IRecursiveData[]\n): IRecursiveData[] => {\n  const generateDataItem = itemData\n  for (let i = 0; i < m; i += 1) {\n    generateDataItem[i] = {\n      name: `item: ${i + 1} - ${ni}`,\n      children: [],\n    }\n  }\n  return generateDataItem\n}\n","import React, { createContext, useContext, useEffect, useState } from 'react'\nimport {\n  DYNAMIC_DATA_GENERATION,\n  RECURSIVE_DATA_GENERATION,\n} from '../../constants'\nimport { IRecursiveData } from '../../interfaces'\nimport { TSoursData } from '../../types'\nimport { addNewChildren } from '../utils'\nimport './styles.css'\n\nexport type TCountryContext = {\n  visibleContext: boolean\n  setVisibleContext: (v: boolean) => void\n}\nexport const CountryContext = createContext<TCountryContext>({\n  visibleContext: true,\n  setVisibleContext: () => null,\n})\n\nexport type CountriesItemProps = {\n  data: IRecursiveData\n  soursData: TSoursData\n  ni: number\n  m: number\n}\nexport const CountriesItem: React.FC<CountriesItemProps> = ({\n  data,\n  soursData,\n  ni,\n  m,\n}) => {\n  const [visibleState, setVisibleState] = useState(false)\n  const { visibleContext, setVisibleContext } = useContext(CountryContext)\n  const dataNew = { ...data }\n  useEffect(() => {\n    if (!visibleContext) {\n      setVisibleState(false)\n      setVisibleContext(true)\n    }\n  }, [setVisibleContext, visibleContext])\n\n  const lastChildren =\n    soursData === DYNAMIC_DATA_GENERATION ||\n    soursData === RECURSIVE_DATA_GENERATION\n      ? ni === 0\n      : !data.children || data.children?.length === 0\n\n  return (\n    <div className=\"countries-container\">\n      <div\n        className={`countries-item ${lastChildren ? 'last-children' : ''}`}\n        onClick={() => {\n          if (soursData === DYNAMIC_DATA_GENERATION && ni > 0)\n            dataNew.children = addNewChildren(\n              ni,\n              m,\n              dataNew.children as IRecursiveData[]\n            )\n          else if (soursData === DYNAMIC_DATA_GENERATION)\n            dataNew.children = addNewChildren(\n              ni,\n              m,\n              dataNew.children as IRecursiveData[]\n            )\n\n          setVisibleContext(!lastChildren)\n          setVisibleState(!visibleState)\n        }}\n      >\n        {data.name}\n      </div>\n      {data.children?.map((item) => {\n        if (!visibleState) return <></>\n        return (\n          <CountriesItem\n            key={item.name}\n            data={item}\n            soursData={soursData}\n            ni={ni - 1}\n            m={m}\n          />\n        )\n      })}\n    </div>\n  )\n}\n","import { gql } from '@apollo/client'\n\nexport const GET_EXTERNAL_DATA = gql`\n  query {\n    data: continents {\n      name\n      children: countries {\n        name\n        children: languages {\n          name\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport {\n  EXTERNAL_DATA,\n  DYNAMIC_DATA_GENERATION,\n  RECURSIVE_DATA_GENERATION,\n  STATIC_DATA,\n} from '../../constants'\nimport { TSoursData } from '../../types'\nimport './styles.css'\n\nexport type SoursDataButtonProps = {\n  soursData: TSoursData\n  setSoursData: (soursData: TSoursData) => void\n}\nexport const SoursDataButton: React.FC<SoursDataButtonProps> = ({\n  soursData,\n  setSoursData,\n}) => {\n  return (\n    <div className=\"sours-data-button form-check\">\n      <input\n        type=\"radio\"\n        className=\"btn-check\"\n        name=\"sours-data\"\n        id=\"static-data\"\n        autoComplete=\"off\"\n        checked={soursData === STATIC_DATA}\n        onChange={() => setSoursData(STATIC_DATA)}\n      />\n      <label className=\"btn btn-outline-primary\" htmlFor=\"static-data\">\n        Static data\n      </label>\n      {` `}\n      <input\n        type=\"radio\"\n        className=\"btn-check\"\n        name=\"sours-data\"\n        id=\"recursive-data-generation\"\n        autoComplete=\"off\"\n        checked={soursData === RECURSIVE_DATA_GENERATION}\n        onChange={() => setSoursData(RECURSIVE_DATA_GENERATION)}\n      />\n      <label\n        className=\"btn btn-outline-warning\"\n        htmlFor=\"recursive-data-generation\"\n      >\n        Recursively generated data\n      </label>\n      {` `}\n      <input\n        type=\"radio\"\n        className=\"btn-check\"\n        name=\"sours-data\"\n        id=\"dynamic-data-generation\"\n        autoComplete=\"off\"\n        checked={soursData === DYNAMIC_DATA_GENERATION}\n        onChange={() => setSoursData(DYNAMIC_DATA_GENERATION)}\n      />\n      <label\n        className=\"btn btn-outline-primary\"\n        htmlFor=\"dynamic-data-generation\"\n      >\n        Dynamically generated data\n      </label>\n      {` `}\n      <input\n        type=\"radio\"\n        className=\"btn-check\"\n        name=\"sours-data\"\n        id=\"external-data\"\n        autoComplete=\"off\"\n        checked={soursData === EXTERNAL_DATA}\n        onChange={() => setSoursData(EXTERNAL_DATA)}\n      />\n      <label className=\"btn btn-outline-primary\" htmlFor=\"external-data\">\n        External data\n      </label>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport type GenerateDataButtonProps = {\n  n: number\n  setN: (n: number) => void\n  m: number\n  setM: (m: number) => void\n}\nexport const GenerateDataButton: React.FC<GenerateDataButtonProps> = ({\n  n,\n  setN,\n  m,\n  setM,\n}) => {\n  return (\n    <div className=\"input-group mb-3\">\n      <span className=\"input-group-text\">n = </span>\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"n - depth of JSON tree\"\n        aria-label=\"n - depth of JSON tree\"\n        value={n}\n        onChange={(e: React.FormEvent<HTMLInputElement>) =>\n          setN(+e.currentTarget.value)\n        }\n      />\n      <span className=\"input-group-text\">m = </span>\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"m - number of children\"\n        aria-label=\"m - number of children\"\n        value={m}\n        onChange={(e: React.FormEvent<HTMLInputElement>) =>\n          setM(+e.currentTarget.value)\n        }\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport './styles.css'\nimport { GenerateDataButton } from '../GenerateDataButton'\n\nexport type RecursiveDataInfoProps = {\n  n: number\n  setN: (n: number) => void\n  m: number\n  setM: (m: number) => void\n}\nexport const RecursiveDataInfo: React.FC<RecursiveDataInfoProps> = ({\n  n,\n  setN,\n  m,\n  setM,\n}) => {\n  return (\n    <>\n      <div\n        className=\"alert alert-warning d-flex align-items-center\"\n        role=\"alert\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          fill=\"currentColor\"\n          className=\"bi bi-exclamation-triangle-fill flex-shrink-0 me-2\"\n          viewBox=\"0 0 16 16\"\n          role=\"img\"\n          aria-label=\"Warning:\"\n        >\n          <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\" />\n        </svg>\n        <div>\n          In this approach, the data object for the React component is created\n          using a compact recursive function.\n          <br />\n          But this approach is not suitable for large values of n (depth of the\n          object tree).\n        </div>\n      </div>\n      <div className=\"recursive-data-info-listing\">\n        <img src=\"./img/listing1.png\" alt=\"\" />\n      </div>\n      <GenerateDataButton n={n} setN={setN} m={m} setM={setM} />\n    </>\n  )\n}\n","import React from 'react'\nimport { GenerateDataButton } from '../GenerateDataButton'\nimport './styles.css'\n\nexport type DynamicDataInfoProps = {\n  n: number\n  setN: (n: number) => void\n  m: number\n  setM: (m: number) => void\n}\nexport const DynamicDataInfo: React.FC<DynamicDataInfoProps> = ({\n  n,\n  setN,\n  m,\n  setM,\n}) => {\n  return (\n    <>\n      <div\n        className=\"alert alert-success d-flex align-items-center\"\n        role=\"alert\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          fill=\"currentColor\"\n          className=\"bi bi-exclamation-triangle-fill flex-shrink-0 me-2\"\n          viewBox=\"0 0 16 16\"\n          role=\"img\"\n          aria-label=\"Warning:\"\n        >\n          <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\" />\n        </svg>\n        <div>\n          In this approach, the data object for the React component is\n          dynamically created in chunks.\n          <br />\n          This approach is suitable for any values of n (depth of the object\n          tree) and m (number of children in each node of object)\n        </div>\n      </div>\n      <div className=\"recursive-data-info-listing\">\n        <img src=\"./img/listing2.png\" alt=\"\" />\n      </div>\n      <GenerateDataButton n={n} setN={setN} m={m} setM={setM} />\n    </>\n  )\n}\n","/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport countries from '../data/countries.json'\nimport { CountriesItem, CountryContext } from './CountriesItem'\nimport { addNewChildren, generateData } from './utils'\nimport { TSoursData } from '../types'\nimport {\n  DYNAMIC_DATA_GENERATION,\n  EXTERNAL_DATA,\n  RECURSIVE_DATA_GENERATION,\n  STATIC_DATA,\n} from '../constants'\nimport { GET_EXTERNAL_DATA } from '../query'\nimport { IRecursiveData } from '../interfaces'\nimport { SoursDataButton } from './SoursDataButton'\nimport { RecursiveDataInfo } from './RecursiveDataInfo'\nimport { DynamicDataInfo } from './DynamicDataInfo'\n\nexport const App: React.FC = () => {\n  const [visibleContext, setVisibleContext] = useState(true)\n  const [soursData, setSoursData] = useState(STATIC_DATA as TSoursData)\n  const [n, setN] = useState(5)\n  const [m, setM] = useState(4)\n  const changeSoursData = (newSoursData: TSoursData) => {\n    setN(5)\n    setM(4)\n    setSoursData(newSoursData)\n  }\n\n  const { loading, error, data } = useQuery(GET_EXTERNAL_DATA)\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error :(</p>\n\n  const externalData = data.data as IRecursiveData[]\n\n  let dataNew\n  switch (soursData) {\n    case RECURSIVE_DATA_GENERATION:\n      dataNew = generateData(n, m)\n      break\n    case DYNAMIC_DATA_GENERATION:\n      dataNew = [] as IRecursiveData[]\n      dataNew = addNewChildren(n, m, dataNew)\n      break\n    case STATIC_DATA:\n      dataNew = countries.data\n      break\n    case EXTERNAL_DATA:\n    default:\n      dataNew = externalData\n  }\n\n  return (\n    <div className=\"App container\">\n      <SoursDataButton soursData={soursData} setSoursData={changeSoursData} />\n      {soursData === RECURSIVE_DATA_GENERATION && (\n        <RecursiveDataInfo n={n} setN={setN} m={m} setM={setM} />\n      )}\n      {soursData === DYNAMIC_DATA_GENERATION && (\n        <DynamicDataInfo n={n} setN={setN} m={m} setM={setM} />\n      )}\n      <CountryContext.Provider value={{ visibleContext, setVisibleContext }}>\n        {dataNew?.map((item) => (\n          <CountriesItem\n            key={item.name}\n            data={item}\n            soursData={soursData}\n            ni={n - 1}\n            m={m}\n          />\n        ))}\n      </CountryContext.Provider>\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport { App } from './App'\n\nconst cache = new InMemoryCache()\n\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com/',\n  cache,\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}